'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import composeClasses from '@mui/utils/composeClasses';
import { alpha } from '@mui/system/colorManipulator';
import CancelIcon from "../internal/svg-icons/Cancel.js";
import useForkRef from "../utils/useForkRef.js";
import unsupportedProp from "../utils/unsupportedProp.js";
import capitalize from "../utils/capitalize.js";
import ButtonBase from "../ButtonBase/index.js";
import { styled } from "../zero-styled/index.js";
import memoTheme from "../utils/memoTheme.js";
import createSimplePaletteValueFilter from "../utils/createSimplePaletteValueFilter.js";
import { useDefaultProps } from "../DefaultPropsProvider/index.js";
import chipClasses, { getChipUtilityClass } from "./chipClasses.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    classes,
    disabled,
    size,
    color,
    iconColor,
    onDelete,
    clickable,
    variant
  } = ownerState;
  const slots = {
    root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
    label: ['label', `label${capitalize(size)}`],
    avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
    icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
    deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
  };
  return composeClasses(slots, getChipUtilityClass, classes);
};
const ChipRoot = styled('div', {
  name: 'MuiChip',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    const {
      color,
      iconColor,
      clickable,
      onDelete,
      size,
      variant
    } = ownerState;
    return [{
      [`& .${chipClasses.avatar}`]: styles.avatar
    }, {
      [`& .${chipClasses.avatar}`]: styles[`avatar${capitalize(size)}`]
    }, {
      [`& .${chipClasses.avatar}`]: styles[`avatarColor${capitalize(color)}`]
    }, {
      [`& .${chipClasses.icon}`]: styles.icon
    }, {
      [`& .${chipClasses.icon}`]: styles[`icon${capitalize(size)}`]
    }, {
      [`& .${chipClasses.icon}`]: styles[`iconColor${capitalize(iconColor)}`]
    }, {
      [`& .${chipClasses.deleteIcon}`]: styles.deleteIcon
    }, {
      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
    }, {
      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
    }, {
      [`& .${chipClasses.deleteIcon}`]: styles[`deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
    }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], styles[`${variant}${capitalize(color)}`]];
  }
})(memoTheme(({
  theme
}) => {
  const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
  return {
    maxWidth: '100%',
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(13),
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    height: 32,
    color: (theme.vars || theme).palette.text.primary,
    backgroundColor: (theme.vars || theme).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: 'nowrap',
    transition: theme.transitions.create(['background-color', 'box-shadow']),
    // reset cursor explicitly in case ButtonBase is used
    cursor: 'unset',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: 'none',
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: 'middle',
    boxSizing: 'border-box',
    [`&.${chipClasses.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      pointerEvents: 'none'
    },
    [`& .${chipClasses.avatar}`]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
      fontSize: theme.typography.pxToRem(12)
    },
    [`& .${chipClasses.avatarColorPrimary}`]: {
      color: (theme.vars || theme).palette.primary.contrastText,
      backgroundColor: (theme.vars || theme).palette.primary.dark
    },
    [`& .${chipClasses.avatarColorSecondary}`]: {
      color: (theme.vars || theme).palette.secondary.contrastText,
      backgroundColor: (theme.vars || theme).palette.secondary.dark
    },
    [`& .${chipClasses.avatarSmall}`]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: theme.typography.pxToRem(10)
    },
    [`& .${chipClasses.icon}`]: {
      marginLeft: 5,
      marginRight: -6
    },
    [`& .${chipClasses.deleteIcon}`]: {
      WebkitTapHighlightColor: 'transparent',
      color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
      fontSize: 22,
      cursor: 'pointer',
      margin: '0 5px 0 -6px',
      '&:hover': {
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
      }
    },
    variants: [{
      props: {
        size: 'small'
      },
      style: {
        height: 24,
        [`& .${chipClasses.icon}`]: {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        },
        [`& .${chipClasses.deleteIcon}`]: {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }
      }
    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['contrastText'])).map(([color]) => {
      return {
        props: {
          color
        },
        style: {
          backgroundColor: (theme.vars || theme).palette[color].main,
          color: (theme.vars || theme).palette[color].contrastText,
          [`& .${chipClasses.deleteIcon}`]: {
            color: theme.vars ? `rgba(${theme.vars.palette[color].contrastTextChannel} / 0.7)` : alpha(theme.palette[color].contrastText, 0.7),
            '&:hover, &:active': {
              color: (theme.vars || theme).palette[color].contrastText
            }
          }
        }
      };
    }), {
      props: props => props.iconColor === props.color,
      style: {
        [`& .${chipClasses.icon}`]: {
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }
      }
    }, {
      props: props => props.iconColor === props.color && props.color !== 'default',
      style: {
        [`& .${chipClasses.icon}`]: {
          color: 'inherit'
        }
      }
    }, {
      props: {
        onDelete: true
      },
      style: {
        [`&.${chipClasses.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['dark'])).map(([color]) => {
      return {
        props: {
          color,
          onDelete: true
        },
        style: {
          [`&.${chipClasses.focusVisible}`]: {
            background: (theme.vars || theme).palette[color].dark
          }
        }
      };
    }), {
      props: {
        clickable: true
      },
      style: {
        userSelect: 'none',
        WebkitTapHighlightColor: 'transparent',
        cursor: 'pointer',
        '&:hover': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
        },
        [`&.${chipClasses.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        },
        '&:active': {
          boxShadow: (theme.vars || theme).shadows[1]
        }
      }
    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter(['dark'])).map(([color]) => ({
      props: {
        color,
        clickable: true
      },
      style: {
        [`&:hover, &.${chipClasses.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[color].dark
        }
      }
    })), {
      props: {
        variant: 'outlined'
      },
      style: {
        backgroundColor: 'transparent',
        border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
        [`&.${chipClasses.clickable}:hover`]: {
          backgroundColor: (theme.vars || theme).palette.action.hover
        },
        [`&.${chipClasses.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette.action.focus
        },
        [`& .${chipClasses.avatar}`]: {
          marginLeft: 4
        },
        [`& .${chipClasses.avatarSmall}`]: {
          marginLeft: 2
        },
        [`& .${chipClasses.icon}`]: {
          marginLeft: 4
        },
        [`& .${chipClasses.iconSmall}`]: {
          marginLeft: 2
        },
        [`& .${chipClasses.deleteIcon}`]: {
          marginRight: 5
        },
        [`& .${chipClasses.deleteIconSmall}`]: {
          marginRight: 3
        }
      }
    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()) // no need to check for mainChannel as it's calculated from main
    .map(([color]) => ({
      props: {
        variant: 'outlined',
        color
      },
      style: {
        color: (theme.vars || theme).palette[color].main,
        border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.7)` : alpha(theme.palette[color].main, 0.7)}`,
        [`&.${chipClasses.clickable}:hover`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)
        },
        [`&.${chipClasses.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[color].main, theme.palette.action.focusOpacity)
        },
        [`& .${chipClasses.deleteIcon}`]: {
          color: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.7)` : alpha(theme.palette[color].main, 0.7),
          '&:hover, &:active': {
            color: (theme.vars || theme).palette[color].main
          }
        }
      }
    }))]
  };
}));
const ChipLabel = styled('span', {
  name: 'MuiChip',
  slot: 'Label',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    const {
      size
    } = ownerState;
    return [styles.label, styles[`label${capitalize(size)}`]];
  }
})({
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: 'nowrap',
  variants: [{
    props: {
      variant: 'outlined'
    },
    style: {
      paddingLeft: 11,
      paddingRight: 11
    }
  }, {
    props: {
      size: 'small'
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      size: 'small',
      variant: 'outlined'
    },
    style: {
      paddingLeft: 7,
     AN/PAPdlhUaxKV/kg8RTK2vDqtHaRHD9FYPAN2mIIbaKwECFZtPZ+gsH/1fedm9EOMtxASjSUVQ+iwxHqZ5+yNjszKeA3cQtVvivrhkW48VUy67Gh4IyiGb91ZynQ8TxyMD44uC4g7f7AXXWh8Iw3gqpG0hffqRCNLfmoB1Yk5hT8AbhWUQ77gLJvffo9T2DPgNNawDyh3q6AxOOd9JmLOou4qWUWazX6fICDBeBojsRKXbgeSE8xEeN6MCrVxSu/sTlEFwxss8iF2zSAcCAAEABQABAAIAAQAHAAMAAQAHABM=</sl:data></sl:binding></mx:renderer><sl:productIdRange xmlns:sl="http://www.microsoft.com/DRM/XrML2/SL/v2" value="{377333b1-8b5d-48d6-9679-1225c872d37c}"></sl:productIdRange><sl:externalValidator xmlns:sl="http://www.microsoft.com/DRM/XrML2/SL/v2"><sl:type>msft:sl/externalValidator/generic</sl:type><sl:data Algorithm="msft:rm/algorithm/flags/1.0">DAAAAAEAAAABAAAA</sl:data></sl:externalValidator></r:allConditions></r:grant><r:issuer><Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.microsoft.com/xrml/lwc14n"/><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><Reference><Transforms><Transform Algorithm="urn:mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform"/><Transform Algorithm="http://www.microsoft.com/xrml/lwc14n"/></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><DigestValue>7vFZ+aAErBETy4pmmqgy7pWo+fU=</DigestValue></Reference></SignedInfo><SignatureValue>J6Xm/JSCmzCdgORCAujLFSaeTXwFbAPb+jr8nw0HNtYhNiqdzr29Oac9ntRRzx3o/h1Gv+09wxlEmYdAt/sGSn8A/nPjqxejK88503NqzFZ+Ijm2oxqSoxLtg7D45EkCpsOYmNbJHMk/CbuD5QGbx6WHS1RdYgyVRy7uJXLtu+dpiJU3egETFXvEvQ025gHBYC5r3a+2AF6V4LEd8XW46adSfTvD6Ev/JAvI+1n4F3DR+/z5Ccke7Jp8rUCshyedM7h4JN2a1wkV8CfUTQ1RkXx/H9bbZa+AIBGZUBLcAlv/cv/KKaQj9hmQqosvwyX3ci10O1ieQyKAT3GumXuT3g==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>tajcnLtdaeK0abuL2BpVC7obdfSChnHAx7TSn/37DwbTDegkDkEnbr0YyO/Q5Jluj5QD897+nWW54RDbYYTdNgWjyUpwYEJFXSZtd8LFK2mbIjKfG2HIShp6JJARlrgObR89a1EH716nP3PbJk6PWQa6VfjBzPQUgSVywIRU+OKbnzNbUVmQ/rAN6+AN/8fRmFhyKqOAiV/Np2jBtGNxLXm9ebMdm5cB8/YNrjp5Ey0nyAtYvovb0B7wnQZfolMF+OFiqzWJo2Ze0O7WHsWBHtIlGR3+c/IjxUJAsI7O3U4hncCZdvlC5GORI2YL9YHZgU9guSPLhAybQ3IGg7LBuQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue></KeyInfo></Signature><r:details><r:timeOfIssue>2016-01-01T00:00:00Z</r:timeOfIssue></r:details></r:issuer><r:otherInfo xmlns:r="urn:mpeg:mpeg21:2003:01-REL-R-NS"><tm:infoTables xmlns:tm="http://www.microsoft.com/DRM/XrML2/TM/v2"><tm:infoList tag="#global"><tm:infoStr name="licenseType">msft:sl/EUL/PHONE/PUBLIC</tm:infoStr><tm:infoStr name="licenseCategory">msft:sl/EUL/PHONE/PUBLIC</tm:infoStr><tm:infoStr name="licenseVersion">2.0</tm:infoStr><tm:infoStr name="licensorUrl">http://licensing.microsoft.com</tm:infoStr><tm:infoStr name="issuanceCertificateId">{7e3094cf-ce3e-4ed4-8c8c-20c2be1add03}</tm:infoStr><tm:infoStr name="productSkuId">{377333b1-8b5d-48d6-9679-1225c872d37c}</tm:infoStr><tm:infoStr name="privateCertificateId">{8615e114-4061-4e2d-9421-be47753305aa}</tm:infoStr><tm:infoStr name="applicationId">{55c92734-d682-4d71-983e-d6ec3f16059f}</tm:infoStr><tm:infoStr name="pkeyConfigLicenseId">{06a4dd30-84b7-4fd2-b859-f1eddb0858f5}</tm:infoStr><tm:infoStr name="productName">Windows(R), Professional edition</tm:infoStr><tm:infoStr name="productAuthor">Microsoft Corporation</tm:infoStr><tm:infoStr name="productDescription">Windows(R) Operating System, RETAIL channel</tm:infoStr><tm:infoStr name="UXDifferentiator">RETAIL</tm:infoStr><tm:infoStr name="Family">Professional</tm:infoStr><tm:infoStr name="ProductKeyGroupUniqueness">WINDOWS6.2</tm:infoStr><tm:infoStr name="hwid:ootGrace">0</tm:infoStr><tm:infoStr name="phone:policy">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